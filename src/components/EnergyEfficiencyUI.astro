---
import TrendingUpIcon from 'lucide-astro/TrendingUp';
import InfoIcon from 'lucide-astro/Info';
import ChevronsUpDownIcon from 'lucide-astro/ChevronsUpDown';
import DownloadIcon from 'lucide-astro/Download';

import { formatPrice, formatNumber } from '@utils/format';

interface Props {
  targetUsage: number;
  actualUsage: number;
  area?: number;
  priceKwh?: number;
  capRate?: number;
}

const { targetUsage, actualUsage, area = 9750, priceKwh = 0.08, capRate = 0.06 } = Astro.props;

const dist = [0.11, 0.1, 0.09, 0.07, 0.06, 0.07, 0.09, 0.07, 0.05, 0.09, 0.11, 0.09];
const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

const tickStep = 5;
const maxValue = Math.max(...dist.map((d) => d * actualUsage));
const maxTick = Math.ceil(maxValue / tickStep) * tickStep;
const ticks: number[] = [];
for (let t = 0; t <= maxTick; t += tickStep) {
  ticks.unshift(t);
}

const costTarget = priceKwh * area * targetUsage;
const costActual = priceKwh * area * actualUsage;

const annualSavings = costTarget - costActual;
const percentChange = (annualSavings / costTarget) * 100;
const valueChange = annualSavings / capRate;
---

<div
  class="rounded-lg border border-neutral-200 bg-white p-6 text-neutral-700 shadow-[0_1px_16px] shadow-black/5 select-none dark:border-neutral-800 dark:bg-neutral-900 dark:text-neutral-300 dark:shadow-black/50"
>
  <div class="mb-2 flex items-center gap-2">
    <div class="mr-auto flex-shrink-0 pr-2">
      <p class="text-md leading-tight font-semibold">Energy efficiency</p>
      <span class="text-xs leading-tight text-neutral-500">
        <span>Office building</span>
        <span class="px-0.5">&middot;</span>
        <span>{formatNumber(area)}m²</span>
      </span>
    </div>
    <div
      class="flex h-7 flex-shrink-0 items-center gap-1 rounded border border-neutral-200 pr-1.5 pl-2.5 transition hover:bg-current/3 dark:border-neutral-800"
    >
      <span class="text-xs">Last 12 months</span>
      <ChevronsUpDownIcon size={12} />
    </div>
    <div
      class="flex h-7 items-center gap-1 rounded border border-neutral-200 pr-2.5 pl-1.5 transition hover:bg-current/3 dark:border-neutral-800"
    >
      <DownloadIcon size={13} />
      <span class="text-xs">Download</span>
    </div>
  </div>
  <div
    class="flex h-7 w-fit flex-shrink-0 items-center gap-1.5 rounded bg-green-400/10 px-2.5 text-green-900 outline -outline-offset-1 outline-current/10 dark:text-green-100/90"
  >
    <TrendingUpIcon size={14} />
    <p class="text-xs whitespace-nowrap">
      {formatNumber(percentChange, true)}% less energy usage compared to the target.
    </p>
  </div>
  <div class="relative mt-6 mb-5 flex items-end gap-2">
    <div class="mb-3 flex flex-shrink-0 flex-col justify-between gap-2 self-stretch">
      {
        ticks.map((t) => (
          <span class="relative pr-1 text-[11px] text-neutral-500">
            {t} kWh/m²
            <hr class="absolute top-1/2 left-full w-screen opacity-10" />
          </span>
        ))
      }
    </div>
    {
      months.map((m, i) => (
        <div class="group relative flex w-full min-w-8 flex-col gap-1 text-center opacity-65 transition duration-300 hover:opacity-100">
          <span class="absolute top-5 w-full text-[10px] text-indigo-100 opacity-0 transition duration-300 group-hover:translate-y-px group-hover:opacity-100 dark:text-indigo-200">
            {formatNumber(dist[i] * actualUsage)}
          </span>
          <div
            class="mt-4 h-2 rounded-t-xs bg-indigo-500 bg-gradient-to-b from-white/10 to-transparent dark:from-neutral-900/10"
            style={`height: ${Math.floor(dist[i] * actualUsage * 6)}px`}
          />
          <span class="text-[11px] leading-4">{m}</span>
        </div>
      ))
    }
  </div>
  <div class="flex flex-col">
    <div class="flex items-center justify-between gap-4 pb-1.5">
      <span class="mr-auto"></span>
      <span class="w-24 text-xs font-medium text-neutral-500">Target</span>
      <span class="w-24 text-xs font-medium">Actual</span>
    </div>
    <div
      class="flex h-10 items-center justify-between gap-4 border-t border-neutral-200 dark:border-neutral-800"
    >
      <span class="mr-auto text-sm">Usage</span>
      <span class="w-24 text-[13px] text-neutral-500">
        {formatNumber(targetUsage, true)} kWh/m²/y
      </span>
      <span class="w-24 text-[13px]">
        {formatNumber(actualUsage, true)} kWh/m²/y
      </span>
    </div>
    <div
      class="flex h-10 items-center justify-between gap-4 border-t border-neutral-200 dark:border-neutral-800"
    >
      <span class="mr-auto text-sm">Cost</span>
      <span class="w-24 text-[13px] text-neutral-500">
        {formatPrice(costTarget)}
      </span>
      <span class="w-24 text-[13px]">
        {formatPrice(costActual)}
      </span>
    </div>
    <div
      class="flex h-10 items-center justify-between gap-4 border-t border-neutral-200 dark:border-neutral-800"
    >
      <div class="mr-auto inline-flex items-center gap-1">
        <span class="text-sm font-medium">Annual savings</span>
        <InfoIcon size={14} class="mt-px text-current/60" />
      </div>

      <span class="w-24 text-[13px] font-medium">
        {formatPrice(annualSavings)}
      </span>
    </div>
    <div
      class="flex h-10 items-center justify-between gap-4 border-t border-neutral-200 dark:border-neutral-800"
    >
      <div class="mr-auto inline-flex items-center gap-1">
        <span class="text-sm font-medium">Increased value</span>
        <InfoIcon size={14} class="mt-px text-current/60" />
      </div>

      <span class="w-24 text-[13px] font-medium">
        {formatPrice(valueChange)}
      </span>
    </div>
  </div>
</div>
